# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: app/proxyman/config.proto

require 'google/protobuf'

require_relative Dir.pwd + '/' + 'common/net/address_pb'
require_relative Dir.pwd + '/' + 'common/net/port_pb'
require_relative Dir.pwd + '/' + 'transport/internet/config_pb'
require_relative Dir.pwd + '/' + 'common/serial/typed_message_pb'

Google::Protobuf::DescriptorPool.generated_pool.build do
  add_file("app/proxyman/config.proto", :syntax => :proto3) do
    add_message "xray.app.proxyman.InboundConfig" do
    end
    add_message "xray.app.proxyman.AllocationStrategy" do
      optional :type, :enum, 1, "xray.app.proxyman.AllocationStrategy.Type"
      optional :concurrency, :message, 2, "xray.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency"
      optional :refresh, :message, 3, "xray.app.proxyman.AllocationStrategy.AllocationStrategyRefresh"
    end
    add_message "xray.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency" do
      optional :value, :uint32, 1
    end
    add_message "xray.app.proxyman.AllocationStrategy.AllocationStrategyRefresh" do
      optional :value, :uint32, 1
    end
    add_enum "xray.app.proxyman.AllocationStrategy.Type" do
      value :Always, 0
      value :Random, 1
      value :External, 2
    end
    add_message "xray.app.proxyman.SniffingConfig" do
      optional :enabled, :bool, 1
      repeated :destination_override, :string, 2
      repeated :domains_excluded, :string, 3
      optional :metadata_only, :bool, 4
      optional :route_only, :bool, 5
    end
    add_message "xray.app.proxyman.ReceiverConfig" do
      optional :port_list, :message, 1, "xray.common.net.PortList"
      optional :listen, :message, 2, "xray.common.net.IPOrDomain"
      optional :allocation_strategy, :message, 3, "xray.app.proxyman.AllocationStrategy"
      optional :stream_settings, :message, 4, "xray.transport.internet.StreamConfig"
      optional :receive_original_destination, :bool, 5
      repeated :domain_override, :enum, 7, "xray.app.proxyman.KnownProtocols"
      optional :sniffing_settings, :message, 8, "xray.app.proxyman.SniffingConfig"
    end
    add_message "xray.app.proxyman.InboundHandlerConfig" do
      optional :tag, :string, 1
      optional :receiver_settings, :message, 2, "xray.common.serial.TypedMessage"
      optional :proxy_settings, :message, 3, "xray.common.serial.TypedMessage"
    end
    add_message "xray.app.proxyman.OutboundConfig" do
    end
    add_message "xray.app.proxyman.SenderConfig" do
      optional :via, :message, 1, "xray.common.net.IPOrDomain"
      optional :stream_settings, :message, 2, "xray.transport.internet.StreamConfig"
      optional :proxy_settings, :message, 3, "xray.transport.internet.ProxyConfig"
      optional :multiplex_settings, :message, 4, "xray.app.proxyman.MultiplexingConfig"
    end
    add_message "xray.app.proxyman.MultiplexingConfig" do
      optional :enabled, :bool, 1
      optional :concurrency, :int32, 2
      optional :xudpConcurrency, :int32, 3
      optional :xudpProxyUDP443, :string, 4
    end
    add_enum "xray.app.proxyman.KnownProtocols" do
      value :HTTP, 0
      value :TLS, 1
    end
  end
end

module Xray
  module App
    module Proxyman
      InboundConfig = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.app.proxyman.InboundConfig").msgclass
      AllocationStrategy = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.app.proxyman.AllocationStrategy").msgclass
      AllocationStrategy::AllocationStrategyConcurrency = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency").msgclass
      AllocationStrategy::AllocationStrategyRefresh = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.app.proxyman.AllocationStrategy.AllocationStrategyRefresh").msgclass
      AllocationStrategy::Type = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.app.proxyman.AllocationStrategy.Type").enummodule
      SniffingConfig = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.app.proxyman.SniffingConfig").msgclass
      ReceiverConfig = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.app.proxyman.ReceiverConfig").msgclass
      InboundHandlerConfig = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.app.proxyman.InboundHandlerConfig").msgclass
      OutboundConfig = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.app.proxyman.OutboundConfig").msgclass
      SenderConfig = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.app.proxyman.SenderConfig").msgclass
      MultiplexingConfig = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.app.proxyman.MultiplexingConfig").msgclass
      KnownProtocols = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("xray.app.proxyman.KnownProtocols").enummodule
    end
  end
end
